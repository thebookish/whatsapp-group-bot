import dayjs from "dayjs";
import { AbstractParserWithWordBoundaryChecking } from "../../../common/parsers/AbstractParserWithWordBoundary.js";
import { assignSimilarDate, assignTheNextDay, implySimilarTime } from "../../../utils/dayjs.js";
import * as references from "../../../common/casualReferences.js";
const PATTERN = new RegExp(`(nu|idag|imorgon|övermorgon|igår|förrgår|i\\s*förrgår)` +
    `(?:\\s*(?:på\\s*)?(morgonen?|förmiddagen?|middagen?|eftermiddagen?|kvällen?|natten?|midnatt))?` +
    `(?=\\W|$)`, "i");
const DATE_GROUP = 1;
const TIME_GROUP = 2;
export default class SVCasualDateParser extends AbstractParserWithWordBoundaryChecking {
    innerPattern(context) {
        return PATTERN;
    }
    innerExtract(context, match) {
        let targetDate = dayjs(context.refDate);
        const dateKeyword = (match[DATE_GROUP] || "").toLowerCase();
        const timeKeyword = (match[TIME_GROUP] || "").toLowerCase();
        let component = context.createParsingComponents();
        switch (dateKeyword) {
            case "nu":
                component = references.now(context.reference);
                break;
            case "idag":
                component = references.today(context.reference);
                break;
            case "imorgon":
            case "imorn":
                assignTheNextDay(component, targetDate);
                break;
            case "igår":
                targetDate = targetDate.add(-1, "day");
                assignSimilarDate(component, targetDate);
                implySimilarTime(component, targetDate);
                break;
            case "förrgår":
            case "i förrgår":
                targetDate = targetDate.add(-2, "day");
                assignSimilarDate(component, targetDate);
                implySimilarTime(component, targetDate);
                break;
        }
        switch (timeKeyword) {
            case "morgon":
            case "morgonen":
                component.imply("hour", 6);
                component.imply("minute", 0);
                component.imply("second", 0);
                component.imply("millisecond", 0);
                break;
            case "förmiddag":
            case "förmiddagen":
                component.imply("hour", 9);
                component.imply("minute", 0);
                component.imply("second", 0);
                component.imply("millisecond", 0);
                break;
            case "middag":
            case "middagen":
                component.imply("hour", 12);
                component.imply("minute", 0);
                component.imply("second", 0);
                component.imply("millisecond", 0);
                break;
            case "eftermiddag":
            case "eftermiddagen":
                component.imply("hour", 15);
                component.imply("minute", 0);
                component.imply("second", 0);
                component.imply("millisecond", 0);
                break;
            case "kväll":
            case "kvällen":
                component.imply("hour", 20);
                component.imply("minute", 0);
                component.imply("second", 0);
                component.imply("millisecond", 0);
                break;
            case "natt":
            case "natten":
            case "midnatt":
                if (timeKeyword === "midnatt") {
                    component.imply("hour", 0);
                }
                else {
                    component.imply("hour", 2);
                }
                component.imply("minute", 0);
                component.imply("second", 0);
                component.imply("millisecond", 0);
                break;
        }
        return component;
    }
}
//# sourceMappingURL=SVCasualDateParser.js.map